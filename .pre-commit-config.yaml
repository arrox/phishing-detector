# ============================================================================
# PRE-COMMIT CONFIGURATION
# Hooks automatizados que se ejecutan antes de cada commit
# Garantiza calidad, seguridad y consistencia del c√≥digo
# ============================================================================

# Configuraci√≥n global
default_install_hook_types: [pre-commit, commit-msg, pre-push]
default_language_version:
  python: python3.11

# Configuraci√≥n de repositorios y hooks
repos:
  # ============================================================================
  # HOOKS B√ÅSICOS DE PRE-COMMIT
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Verificaciones b√°sicas de archivos
      - id: trailing-whitespace
        name: "üßπ Eliminar espacios al final"
        description: "Remove trailing whitespace"
        exclude: "^(.*\\.md|.*\\.txt)$"
        
      - id: end-of-file-fixer
        name: "üìù Fijar final de archivo"
        description: "Ensure files end with newline"
        exclude: "^(.*\\.json|.*\\.txt)$"
        
      - id: check-yaml
        name: "üìã Validar YAML"
        description: "Check YAML syntax"
        args: [--allow-multiple-documents]
        
      - id: check-json
        name: "üîç Validar JSON"
        description: "Check JSON syntax"
        
      - id: check-toml
        name: "‚öôÔ∏è Validar TOML"
        description: "Check TOML syntax"
        
      - id: check-xml
        name: "üìÑ Validar XML"
        description: "Check XML syntax"

      # Verificaciones de contenido
      - id: check-case-conflict
        name: "üìÇ Verificar conflictos de nombres"
        description: "Check for case conflicts in filenames"
        
      - id: check-merge-conflict
        name: "üîÄ Verificar conflictos de merge"
        description: "Check for merge conflict markers"
        
      - id: check-executables-have-shebangs
        name: "üîß Verificar shebangs"
        description: "Check that executables have shebangs"
        
      - id: check-shebang-scripts-are-executable
        name: "‚ö° Verificar permisos de scripts"
        description: "Check that scripts with shebangs are executable"

      # Verificaciones de seguridad b√°sicas
      - id: detect-private-key
        name: "üîê Detectar claves privadas"
        description: "Detect private keys"
        
      - id: check-added-large-files
        name: "üì¶ Verificar archivos grandes"
        description: "Check for large files"
        args: [--maxkb=1000]
        
      - id: forbid-new-submodules
        name: "üö´ Prohibir nuevos subm√≥dulos"
        description: "Forbid new submodules"

  # ============================================================================
  # FORMATEO DE C√ìDIGO PYTHON
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        name: "üé® Formatear c√≥digo con Black"
        description: "Format Python code with Black"
        language_version: python3
        args: [--line-length=88]
        types: [python]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: "üìö Ordenar imports"
        description: "Sort Python imports with isort"
        language_version: python3
        args: [--profile=black]
        types: [python]

  # ============================================================================
  # LINTING Y AN√ÅLISIS EST√ÅTICO
  # ============================================================================
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: "üîç Linting con flake8"
        description: "Lint Python code with flake8"
        language_version: python3
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503,E501
          - --per-file-ignores=__init__.py:F401
        types: [python]
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.6.1
    hooks:
      - id: mypy
        name: "üéØ Type checking con mypy"
        description: "Type check Python code with mypy"
        language_version: python3
        args: [--ignore-missing-imports, --strict-optional]
        types: [python]
        additional_dependencies:
          - types-requests
          - types-python-jose

  # ============================================================================
  # AN√ÅLISIS DE SEGURIDAD
  # ============================================================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "üõ°Ô∏è An√°lisis de seguridad con Bandit"
        description: "Security analysis with Bandit"
        language_version: python3
        args:
          - -c
          - security/bandit.yaml
          - -r
          - src/
        types: [python]
        pass_filenames: false

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "üîê Detectar secretos"
        description: "Detect secrets in code"
        args:
          - --baseline
          - .secrets.baseline
          - --exclude-files
          - ".*\\.lock$"
          - --exclude-files
          - ".*\\.min\\.js$"
        exclude: "^(tests/.*|.*\\.example$)"

  # ============================================================================
  # VALIDACI√ìN DE ARCHIVOS DE CONFIGURACI√ìN
  # ============================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        name: "üìã Validar YAML con yamllint"
        description: "Lint YAML files"
        args:
          - -c
          - .yamllint.yaml
        types: [yaml]

  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.27.0
    hooks:
      - id: check-github-workflows
        name: "üîÑ Validar GitHub Actions"
        description: "Validate GitHub Actions workflows"
        files: "^\\.github/workflows/.*\\.ya?ml$"

  # ============================================================================
  # DOCKER Y CONTENEDORES
  # ============================================================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "üê≥ Linting Dockerfile"
        description: "Lint Dockerfiles with hadolint"
        args: [--ignore, DL3008, --ignore, DL3009]

  # ============================================================================
  # TERRAFORM
  # ============================================================================
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.83.5
    hooks:
      - id: terraform_fmt
        name: "üèóÔ∏è Formatear Terraform"
        description: "Format Terraform files"
        
      - id: terraform_validate
        name: "‚úÖ Validar Terraform"
        description: "Validate Terraform configuration"
        
      - id: terraform_tflint
        name: "üîç Linting Terraform"
        description: "Lint Terraform with tflint"
        
      - id: terraform_checkov
        name: "üõ°Ô∏è Seguridad Terraform"
        description: "Security analysis with Checkov"
        args:
          - --framework=terraform
          - --skip-check=CKV2_GCP_18  # Ejemplo: skip espec√≠fico si es necesario

  # ============================================================================
  # DOCUMENTACI√ìN
  # ============================================================================
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        name: "üìù Formatear Markdown"
        description: "Format Markdown files"
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black
        args: [--wrap=80]
        files: ".*\\.md$"

  # ============================================================================
  # HOOKS ESPEC√çFICOS PARA PHISHING DETECTOR
  # ============================================================================
  - repo: local
    hooks:
      # Verificar que no se commiteen API keys reales
      - id: check-api-keys
        name: "üîë Verificar API keys"
        description: "Check for real API keys in code"
        entry: bash
        language: system
        args:
          - -c
          - |
            if grep -r "AIza[0-9A-Za-z_-]\{35\}" --include="*.py" --include="*.json" --include="*.yaml" src/ 2>/dev/null; then
              echo "‚ùå Real Google API key detected!"
              exit 1
            fi
            if grep -r "ya29\." --include="*.py" --include="*.json" --include="*.yaml" src/ 2>/dev/null; then
              echo "‚ùå Real OAuth token detected!"
              exit 1
            fi
        pass_filenames: false

      # Verificar que los tests pasen antes del commit
      - id: pytest-check
        name: "üß™ Ejecutar tests"
        description: "Run pytest before commit"
        entry: bash
        language: system
        args:
          - -c
          - |
            if command -v pytest &> /dev/null; then
              pytest tests/ -x -q --tb=no
            else
              echo "‚ö†Ô∏è pytest no instalado, saltando tests"
            fi
        pass_filenames: false
        stages: [pre-push]

      # Verificar configuraci√≥n de seguridad
      - id: security-config-check
        name: "üîí Verificar configuraci√≥n de seguridad"
        description: "Check security configuration"
        entry: bash
        language: system
        args:
          - -c
          - |
            # Verificar que existen archivos de configuraci√≥n de seguridad
            if [ ! -f .gitleaks.toml ]; then
              echo "‚ùå .gitleaks.toml missing"
              exit 1
            fi
            if [ ! -f security/bandit.yaml ]; then
              echo "‚ùå security/bandit.yaml missing"
              exit 1
            fi
            echo "‚úÖ Security configuration verified"
        pass_filenames: false

      # Verificar estructura de proyecto
      - id: project-structure
        name: "üìÅ Verificar estructura de proyecto"
        description: "Check project structure"
        entry: bash
        language: system
        args:
          - -c
          - |
            # Verificar estructura b√°sica
            required_dirs=("src" "tests" "terraform" "security" "monitoring")
            for dir in "${required_dirs[@]}"; do
              if [ ! -d "$dir" ]; then
                echo "‚ùå Required directory missing: $dir"
                exit 1
              fi
            done
            
            required_files=("pyproject.toml" "Dockerfile" "Makefile")
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "‚ùå Required file missing: $file"
                exit 1
              fi
            done
            
            echo "‚úÖ Project structure verified"
        pass_filenames: false

# ============================================================================
# CONFIGURACI√ìN DE COMMIT MESSAGE
# ============================================================================
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        name: "üìù Verificar formato de commit"
        description: "Check commit message format"
        stages: [commit-msg]
        args:
          - feat
          - fix
          - docs
          - style
          - refactor
          - perf
          - test
          - build
          - ci
          - chore
          - revert
          - security

# ============================================================================
# CONFIGURACI√ìN DE CI ESPEC√çFICA
# ============================================================================
ci:
  # Configuraci√≥n para pre-commit.ci
  autofix_commit_msg: |
    ü§ñ [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: develop
  autoupdate_commit_msg: |
    üîÑ [pre-commit.ci] pre-commit autoupdate
  autoupdate_schedule: monthly
  skip:
    # Hooks que requieren secretos o configuraci√≥n espec√≠fica
    - pytest-check
    - terraform_checkov
  submodules: false

# ============================================================================
# CONFIGURACI√ìN ESPEC√çFICA DE ARCHIVOS
# ============================================================================

# Excluir archivos espec√≠ficos de ciertos hooks
exclude: |
  (?x)^(
    # Archivos generados
    .*\.min\.js|
    .*\.min\.css|
    
    # Archivos de dependencias
    package-lock\.json|
    yarn\.lock|
    
    # Archivos temporales
    .*\.tmp|
    .*\.temp|
    
    # Archivos de configuraci√≥n de IDEs
    \.vscode/.*|
    \.idea/.*|
    
    # Archivos de terraform state
    .*\.tfstate|
    .*\.tfstate\.backup|
    
    # Archivos de logs
    .*\.log
  )$