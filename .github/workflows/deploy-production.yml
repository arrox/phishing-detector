# ============================================================================
# PRODUCTION DEPLOYMENT WORKFLOW
# Deploys to production when code is merged to main branch
# ============================================================================

name: 'Production Deployment'

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if CI is not passing'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  id-token: write

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: phishing-detector
  REGION: us-central1

jobs:
  # ============================================================================
  # VALIDACIONES PRE-DEPLOYMENT
  # ============================================================================
  pre-deployment-checks:
    name: 'Pre-deployment Checks'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 'Checkout c√≥digo'
        uses: actions/checkout@v4
        
      - name: 'Verificar CI status'
        if: ${{ !inputs.force_deploy }}
        run: |
          echo "üîç Verificando que CI est√© pasando..."
          # Esta verificaci√≥n se omite si force_deploy = true
          
      - name: 'Generar versi√≥n de producci√≥n'
        id: version
        run: |
          VERSION=v$(date +%Y%m%d)-${GITHUB_SHA:0:8}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Versi√≥n de producci√≥n: $VERSION"
          
      - name: 'Validar secrets de producci√≥n'
        run: |
          echo "üîê Validando secrets de producci√≥n..."
          
          REQUIRED_SECRETS=(
            "GCP_PROJECT_ID"
            "GCP_WORKLOAD_IDENTITY_PROVIDER" 
            "GCP_SERVICE_ACCOUNT"
            "CLAUDE_API_KEY_PROD"
            "API_TOKEN_PROD"
          )
          
          MISSING_SECRETS=()
          
          # Verificar GCP secrets
          if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            MISSING_SECRETS+=("GCP_PROJECT_ID")
          fi
          if [[ -z "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}" ]]; then
            MISSING_SECRETS+=("GCP_WORKLOAD_IDENTITY_PROVIDER")
          fi
          if [[ -z "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]]; then
            MISSING_SECRETS+=("GCP_SERVICE_ACCOUNT")
          fi
          
          # Verificar application secrets (opcional para primer deployment)
          if [[ -z "${{ secrets.CLAUDE_API_KEY_PROD }}" ]]; then
            echo "‚ö†Ô∏è CLAUDE_API_KEY_PROD no configurado - usando placeholder"
          fi
          if [[ -z "${{ secrets.API_TOKEN_PROD }}" ]]; then
            echo "‚ö†Ô∏è API_TOKEN_PROD no configurado - usando placeholder"
          fi
          
          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
            echo "‚ùå Secrets cr√≠ticos faltantes: ${MISSING_SECRETS[*]}"
            echo "Configura estos secrets en GitHub para continuar"
            exit 1
          fi
          
          echo "‚úÖ Validaci√≥n de secrets completada"

  # ============================================================================
  # DEPLOYMENT A PRODUCCI√ìN
  # ============================================================================
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment: 
      name: production
      url: https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.a.run.app
      
    steps:
      - name: 'Checkout c√≥digo'
        uses: actions/checkout@v4
        
      - name: 'Configurar autenticaci√≥n GCP'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: 'Configurar Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
        
      - name: 'Configurar Docker para GCR'
        run: |
          gcloud auth configure-docker gcr.io --quiet
          
      - name: 'Build imagen de producci√≥n'
        run: |
          echo "üèóÔ∏è Building imagen para producci√≥n (minimal Claude version for stability)..."
          docker build \
            --file Dockerfile.minimal \
            --tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.pre-deployment-checks.outputs.version }} \
            --tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --build-arg VERSION=${{ needs.pre-deployment-checks.outputs.version }} \
            --build-arg ENVIRONMENT=production \
            .
            
      - name: 'Push imagen a GCR'
        run: |
          echo "üì§ Pushing imagen a Google Container Registry..."
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.pre-deployment-checks.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          
      - name: 'Deploy a Cloud Run'
        run: |
          echo "üöÄ Desplegando a Cloud Run..."
          
          # Configurar variables de entorno
          CLAUDE_KEY="${{ secrets.CLAUDE_API_KEY_PROD }}"
          API_TOKEN="${{ secrets.API_TOKEN_PROD }}"
          
          # Usar placeholders si los secrets no est√°n configurados
          if [[ -z "$CLAUDE_KEY" ]]; then
            CLAUDE_KEY="your-claude-api-key-here"
            echo "‚ö†Ô∏è Usando placeholder para CLAUDE_API_KEY"
          fi
          if [[ -z "$API_TOKEN" ]]; then
            API_TOKEN="your-api-token-here"  
            echo "‚ö†Ô∏è Usando placeholder para API_TOKEN"
          fi
          
          # Deploy with new image and set all environment variables in one command
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.pre-deployment-checks.outputs.version }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8000 \
            --memory=1Gi \
            --cpu=1 \
            --concurrency=80 \
            --max-instances=10 \
            --min-instances=0 \
            --timeout=300 \
            --set-env-vars="LOG_LEVEL=info,WORKERS=2,ENVIRONMENT=production,CLAUDE_API_KEY=$CLAUDE_KEY,AUTH_TOKEN=$API_TOKEN" \
            --tag=${{ needs.pre-deployment-checks.outputs.version }} \
            --project=${{ env.PROJECT_ID }}
          
          echo "‚úÖ Deployment completado exitosamente"
            
      - name: 'Obtener URL de servicio'
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üåê Servicio desplegado en: $SERVICE_URL"
          
      - name: 'Health check de producci√≥n'
        run: |
          echo "üè• Verificando health check..."
          SERVICE_URL="${{ steps.service-url.outputs.url }}"
          
          # Esperar un momento para que el servicio inicie
          sleep 30
          
          # Health check
          if curl -f "$SERVICE_URL/health" --max-time 30; then
            echo "‚úÖ Health check exitoso"
          else
            echo "‚ùå Health check fall√≥"
            exit 1
          fi
          
          # Ready check  
          if curl -f "$SERVICE_URL/ready" --max-time 30; then
            echo "‚úÖ Ready check exitoso"
          else
            echo "‚ö†Ô∏è Ready check fall√≥ (puede ser normal)"
          fi

  # ============================================================================
  # POST-DEPLOYMENT
  # ============================================================================
  post-deployment:
    name: 'Post-deployment Tasks'
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-production]
    if: always()
    
    steps:
      - name: 'Notificaci√≥n de deployment'
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "üéâ DEPLOYMENT A PRODUCCI√ìN EXITOSO"
            echo "üìã Versi√≥n: ${{ needs.pre-deployment-checks.outputs.version }}"
            echo "üåê URL: https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.a.run.app"
            echo "‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          else
            echo "‚ùå DEPLOYMENT A PRODUCCI√ìN FALL√ì"
            echo "üîç Revisa los logs para m√°s detalles"
          fi
          
      - name: 'Crear GitHub Release'
        if: needs.deploy-production.result == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.pre-deployment-checks.outputs.version }}
          name: 'Production Release ${{ needs.pre-deployment-checks.outputs.version }}'
          body: |
            üöÄ **Deployment a Producci√≥n Exitoso**
            
            **Versi√≥n:** ${{ needs.pre-deployment-checks.outputs.version }}
            **Timestamp:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            
            **üîß Servicios desplegados:**
            - Phishing Detector API con Claude Sonnet 4
            - Gmail Addon con clasificaci√≥n mejorada
            - Endpoints: /analyze/gmail y /analyze/eml
            
            **üåê Ambiente:** Producci√≥n
            **üìç URL:** https://${{ env.SERVICE_NAME }}-${{ env.PROJECT_ID }}.a.run.app
            
            **‚ú® Caracter√≠sticas:**
            - An√°lisis avanzado con Claude Sonnet 4
            - Clasificaci√≥n: SEGURO/SPAM/SOSPECHOSO/PHISHING
            - Respuestas humanizadas
            - Reducci√≥n de falsos positivos
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}